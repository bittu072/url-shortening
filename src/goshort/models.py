from django.db import models
from django.conf import settings

from .utility import code_generator, create_shorturl

SHORTURL_MAX = getattr(settings, "SHORTURL_MAX", 15)
# in settings look for variable "SHORTURL_MAX" and if not found assign 15

# Create your models here.
class ShortenURLManager(models.Manager):
    def all(self, *args, **kargs):
        qs = super(ShortenURLManager, self).all(*args, **kargs)
        qs = qs_main.filter(active=True)
        return qs

    def refresh_shorturls(self):
        qs =  ShortenURL.objects.filter(id__gte=1)
        new_url = 0
        for q in qs:
            q.shorturl = create_shorturl(q)
            print (q.shorturl)
            q.save()
            new_url +=1
        return "new urls made: {i}".format(i=new_url)

class ShortenURL(models.Model):
    url = models.CharField(max_length=250,)
    shorturl = models.CharField(max_length=15, unique=True, blank=True)
    updated = models.DateTimeField(auto_now=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    active = models.BooleanField(default=True)
    # if you already have some data with field and then you add another field in database
    # shorturl = models.CharField(max_length=15, null=True) # emty in database is ok
    # or
    # shorturl = models.CharField(max_length=15, default='abcd')
    # or you can delete database and regenerate

    objects = ShortenURLManager()

    def save(self, *args, **kwargs):
        if self.shorturl is None or self.shorturl == "":
            self.shorturl = create_shorturl(self)
        super(ShortenURL, self).save(*args, **kwargs)

    def __str__(self):
        return str(self.url)
    # this return function is to show the added data as a list on web app
    # to show the primary key or primary id
    # return str(self.id)
    # return str(self.pk)
    # id and pk will be autogenerated by django

    # for python2
    def __unicode__(self):
        return str(self.url)
